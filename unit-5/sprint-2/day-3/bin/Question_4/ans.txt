A condition in which the critical section (a part of the program where shared memory is accessed) 
is concurrently executed by two or more threads. It leads to incorrect behavior of a program.


In layman terms, a race condition can be defined as, a condition in which two or more
 threads compete together to get certain shared resources.


For example, if thread A is reading data from the linked list and 
another thread B is trying to delete the same data.
 This process leads to a race condition that may result in run time error.
 
 
 To solve the data inconsistency problem in java synchronized keyword is used.
So the thread-safety is achieved and race condition is avoided by the help of synchronized keyword.
 
 class Common{
public void fun1(Stirng name){
System.out.print("Welcome");
try{
Thread.sleep(1000);
}
catch(Exception ee){
}
System.out.println(name);
}
 
 
 class ThreadA extends Thread{
Common c;
String name;
public ThreadA(Common c,String name) {
this.c=c;
this.name=name;
}
@Override
public void run() {
c.fun1(name);
}
}
class ThreadB extends Thread{
Common c;
String name;
public ThreadB(Common c,String name) {
this.c=c;
this.name=name;
}
@Override
public void run() {
c.fun1(name);
}
}
class Main{
public static void main(String[] args){
Common c=new Common();
//sharing same Common object to two thread
ThreadA t1=new ThreadA(c,"Ram");
ThreadB t2=new ThreadB(c,"Shyam");
t1.start();
t2.start();